From 66579cafd7462f9e244fd5bfe2eb64648a1f9a16 Mon Sep 17 00:00:00 2001
From: Finn Haedicke <finn_haedicke@gmx.net>
Date: Thu, 16 Apr 2015 17:54:34 +0200
Subject: [PATCH] moved Minisat namespace into CVC4

This avoids conflicts when CVC4 is linked to an application that
also uses plain Minisat.

Conflicts:
	src/proof/sat_proof.cpp
	src/proof/sat_proof.h
---
 src/proof/proof_manager.h           |  5 ++-
 src/proof/sat_proof.cpp             | 44 +++++++++---------
 src/proof/sat_proof.h               | 90 +++++++++++++++++++------------------
 src/prop/minisat/core/Dimacs.h      |  2 +
 src/prop/minisat/core/Main.cc       |  2 +-
 src/prop/minisat/core/Solver.cc     |  2 +-
 src/prop/minisat/core/Solver.h      |  2 +
 src/prop/minisat/core/SolverTypes.h |  4 ++
 src/prop/minisat/mtl/Alg.h          |  2 +
 src/prop/minisat/mtl/Alloc.h        |  2 +
 src/prop/minisat/mtl/Heap.h         |  2 +
 src/prop/minisat/mtl/Map.h          |  2 +
 src/prop/minisat/mtl/Queue.h        |  2 +
 src/prop/minisat/mtl/Sort.h         |  2 +
 src/prop/minisat/mtl/Vec.h          |  2 +
 src/prop/minisat/mtl/XAlloc.h       |  2 +
 src/prop/minisat/simp/SimpSolver.cc |  2 +-
 src/prop/minisat/simp/SimpSolver.h  |  2 +
 src/prop/minisat/utils/Options.h    |  2 +
 src/prop/minisat/utils/ParseUtils.h |  2 +
 20 files changed, 103 insertions(+), 72 deletions(-)

diff --git a/src/proof/proof_manager.h b/src/proof/proof_manager.h
index f428de3..91a4b8c 100644
--- a/src/proof/proof_manager.h
+++ b/src/proof/proof_manager.h
@@ -24,13 +24,14 @@
 #include "util/proof.h"
 
 
+
+namespace CVC4 {
+
 // forward declarations
 namespace Minisat {
   class Solver;
 }/* Minisat namespace */
 
-namespace CVC4 {
-
 namespace prop {
   class CnfStream;
 }/* CVC4::prop namespace */
diff --git a/src/proof/sat_proof.cpp b/src/proof/sat_proof.cpp
index 0ace84b..2b6ef58 100644
--- a/src/proof/sat_proof.cpp
+++ b/src/proof/sat_proof.cpp
@@ -21,7 +21,7 @@
 #include "prop/minisat/minisat.h"
 
 using namespace std;
-using namespace Minisat;
+using namespace CVC4::Minisat;
 using namespace CVC4::prop;
 namespace CVC4 {
 
@@ -258,7 +258,7 @@ bool SatProof::checkResolution(ClauseId id) {
 
 /// helper methods
 
-ClauseId SatProof::getClauseId(::Minisat::CRef ref) {
+ClauseId SatProof::getClauseId(Minisat::CRef ref) {
   if(d_clauseId.find(ref) == d_clauseId.end()) {
     Debug("proof:sat") << "Missing clause \n";
   }
@@ -267,7 +267,7 @@ ClauseId SatProof::getClauseId(::Minisat::CRef ref) {
 }
 
 
-ClauseId SatProof::getClauseId(::Minisat::Lit lit) {
+ClauseId SatProof::getClauseId(Minisat::Lit lit) {
   Assert(d_unitId.find(toInt(lit)) != d_unitId.end());
   return d_unitId[toInt(lit)];
 }
@@ -297,11 +297,11 @@ bool SatProof::isUnit(ClauseId id) {
   return d_idUnit.find(id) != d_idUnit.end();
 }
 
-bool SatProof::isUnit(::Minisat::Lit lit) {
+bool SatProof::isUnit(Minisat::Lit lit) {
   return d_unitId.find(toInt(lit)) != d_unitId.end();
 }
 
-ClauseId SatProof::getUnitId(::Minisat::Lit lit) {
+ClauseId SatProof::getUnitId(Minisat::Lit lit) {
   Assert(isUnit(lit));
   return d_unitId[toInt(lit)];
 }
@@ -318,7 +318,6 @@ bool SatProof::isLemmaClause(ClauseId id) {
   return (d_lemmaClauses.find(id) != d_lemmaClauses.end());
 }
 
-
 void SatProof::print(ClauseId id) {
   if (d_deleted.find(id) != d_deleted.end()) {
     Debug("proof:sat") << "del"<<id;
@@ -364,7 +363,7 @@ void SatProof::printRes(ResChain* res) {
 
 /// registration methods
 
-ClauseId SatProof::registerClause(::Minisat::CRef clause, ClauseKind kind) {
+ClauseId SatProof::registerClause(Minisat::CRef clause, ClauseKind kind) {
   Assert(clause != CRef_Undef);
   ClauseIdMap::iterator it = d_clauseId.find(clause);
   if (it == d_clauseId.end()) {
@@ -384,7 +383,8 @@ ClauseId SatProof::registerClause(::Minisat::CRef clause, ClauseKind kind) {
   return d_clauseId[clause];
 }
 
-ClauseId SatProof::registerUnitClause(::Minisat::Lit lit, ClauseKind kind) {
+
+ClauseId SatProof::registerUnitClause(Minisat::Lit lit, ClauseKind kind) {
   UnitIdMap::iterator it = d_unitId.find(toInt(lit));
   if (it == d_unitId.end()) {
     ClauseId newId = d_idCounter++;
@@ -403,7 +403,7 @@ ClauseId SatProof::registerUnitClause(::Minisat::Lit lit, ClauseKind kind) {
   return d_unitId[toInt(lit)];
 }
 
-void SatProof::removedDfs(::Minisat::Lit lit, LitSet* removedSet, LitVector& removeStack, LitSet& inClause, LitSet& seen) {
+void SatProof::removedDfs(Minisat::Lit lit, LitSet* removedSet, LitVector& removeStack, LitSet& inClause, LitSet& seen) {
   // if we already added the literal return
   if (seen.count(lit)) {
     return;
@@ -479,13 +479,13 @@ void SatProof::registerResolution(ClauseId id, ResChain* res) {
 
 /// recording resolutions
 
-void SatProof::startResChain(::Minisat::CRef start) {
+void SatProof::startResChain(Minisat::CRef start) {
   ClauseId id = getClauseId(start);
   ResChain* res = new ResChain(id);
   d_resStack.push_back(res);
 }
 
-void SatProof::addResolutionStep(::Minisat::Lit lit, ::Minisat::CRef clause, bool sign) {
+void SatProof::addResolutionStep(Minisat::Lit lit, Minisat::CRef clause, bool sign) {
   ClauseId id = registerClause(clause);
   ResChain* res = d_resStack.back();
   res->addStep(lit, id, sign);
@@ -500,7 +500,7 @@ void SatProof::endResChain(CRef clause) {
 }
 
 
-void SatProof::endResChain(::Minisat::Lit lit) {
+void SatProof::endResChain(Minisat::Lit lit) {
   Assert(d_resStack.size() > 0);
   ClauseId id = registerUnitClause(lit);
   ResChain* res = d_resStack.back();
@@ -508,7 +508,7 @@ void SatProof::endResChain(::Minisat::Lit lit) {
   d_resStack.pop_back();
 }
 
-void SatProof::storeLitRedundant(::Minisat::Lit lit) {
+void SatProof::storeLitRedundant(Minisat::Lit lit) {
   Assert(d_resStack.size() > 0);
   ResChain* res = d_resStack.back();
   res->addRedundantLit(lit);
@@ -516,17 +516,17 @@ void SatProof::storeLitRedundant(::Minisat::Lit lit) {
 
 /// constructing resolutions
 
-void SatProof::resolveOutUnit(::Minisat::Lit lit) {
+void SatProof::resolveOutUnit(Minisat::Lit lit) {
   ClauseId id = resolveUnit(~lit);
   ResChain* res = d_resStack.back();
   res->addStep(lit, id, !sign(lit));
 }
 
-void SatProof::storeUnitResolution(::Minisat::Lit lit) {
+void SatProof::storeUnitResolution(Minisat::Lit lit) {
   resolveUnit(lit);
 }
 
-ClauseId SatProof::resolveUnit(::Minisat::Lit lit) {
+ClauseId SatProof::resolveUnit(Minisat::Lit lit) {
   // first check if we already have a resolution for lit
   if(isUnit(lit)) {
     ClauseId id = getClauseId(lit);
@@ -561,18 +561,18 @@ void SatProof::toStream(std::ostream& out) {
   Unimplemented("native proof printing not supported yet");
 }
 
-void SatProof::storeUnitConflict(::Minisat::Lit conflict_lit, ClauseKind kind) {
+void SatProof::storeUnitConflict(Minisat::Lit conflict_lit, ClauseKind kind) {
   Assert(!d_storedUnitConflict);
   d_unitConflictId = registerUnitClause(conflict_lit, kind);
   d_storedUnitConflict = true;
   Debug("proof:sat:detailed") <<"storeUnitConflict " << d_unitConflictId << "\n";
 }
 
-void SatProof::finalizeProof(::Minisat::CRef conflict_ref) {
+void SatProof::finalizeProof(Minisat::CRef conflict_ref) {
   Assert(d_resStack.size() == 0);
-  Assert(conflict_ref != ::Minisat::CRef_Undef);
+  Assert(conflict_ref != Minisat::CRef_Undef);
   ClauseId conflict_id;
-  if (conflict_ref == ::Minisat::CRef_Lazy) {
+  if (conflict_ref == Minisat::CRef_Lazy) {
     Assert(d_storedUnitConflict);
     conflict_id = d_unitConflictId;
 
@@ -610,7 +610,7 @@ void SatProof::finalizeProof(::Minisat::CRef conflict_ref) {
 
 /// CRef manager
 
-void SatProof::updateCRef(::Minisat::CRef oldref, ::Minisat::CRef newref) {
+void SatProof::updateCRef(Minisat::CRef oldref, Minisat::CRef newref) {
   if (d_clauseId.find(oldref) == d_clauseId.end()) {
     return;
   }
@@ -763,6 +763,4 @@ void LFSCSatProof::printResolutions(std::ostream& out, std::ostream& paren) {
   printResolution(d_emptyClauseId, out, paren);
 }
 
-
 } /* CVC4 namespace */
-
diff --git a/src/proof/sat_proof.h b/src/proof/sat_proof.h
index 7795dfa..0bbbe8c 100644
--- a/src/proof/sat_proof.h
+++ b/src/proof/sat_proof.h
@@ -29,11 +29,6 @@
 #include "expr/expr.h"
 #include "proof/proof_manager.h"
 
-namespace Minisat {
-  class Solver;
-  typedef uint32_t CRef;
-}/* Minisat namespace */
-
 #include "prop/minisat/core/SolverTypes.h"
 #include "util/proof.h"
 #include "prop/sat_solver_types.h"
@@ -43,17 +38,23 @@ namespace std {
 
 namespace CVC4 {
 
+namespace Minisat {
+  class Solver;
+  typedef uint32_t CRef;
+}/* Minisat namespace */
+
+
 /**
  * Helper debugging functions
  */
-void printDebug(::Minisat::Lit l);
-void printDebug(::Minisat::Clause& c);
+void printDebug(Minisat::Lit l);
+void printDebug(Minisat::Clause& c);
 
 struct ResStep {
-  ::Minisat::Lit lit;
+  Minisat::Lit lit;
   ClauseId id;
   bool sign;
-  ResStep(::Minisat::Lit l, ClauseId i, bool s) :
+  ResStep(Minisat::Lit l, ClauseId i, bool s) :
     lit(l),
     id(i),
     sign(s)
@@ -61,7 +62,7 @@ struct ResStep {
 };/* struct ResStep */
 
 typedef std::vector< ResStep > ResSteps;
-typedef std::set < ::Minisat::Lit> LitSet;
+typedef std::set < Minisat::Lit> LitSet;
 
 class ResChain {
 private:
@@ -70,9 +71,9 @@ private:
   LitSet*        d_redundantLits;
 public:
   ResChain(ClauseId start);
-  void addStep(::Minisat::Lit, ClauseId, bool);
+  void addStep(Minisat::Lit, ClauseId, bool);
   bool redundantRemoved() { return (d_redundantLits == NULL || d_redundantLits->empty()); }
-  void addRedundantLit(::Minisat::Lit lit);
+  void addRedundantLit(Minisat::Lit lit);
   ~ResChain();
   // accessor methods
   ClauseId  getStart()     { return d_start; }
@@ -80,17 +81,18 @@ public:
   LitSet*   getRedundant() { return d_redundantLits; }
 };/* class ResChain */
 
-typedef std::hash_map < ClauseId, ::Minisat::CRef > IdCRefMap;
-typedef std::hash_map < ::Minisat::CRef, ClauseId > ClauseIdMap;
-typedef std::hash_map < ClauseId, ::Minisat::Lit>   IdUnitMap;
+typedef std::hash_map < ClauseId, Minisat::CRef > IdCRefMap;
+typedef std::hash_map < Minisat::CRef, ClauseId > ClauseIdMap;
+typedef std::hash_map < ClauseId, Minisat::Lit>   IdUnitMap;
 typedef std::hash_map < int, ClauseId>            UnitIdMap; //FIXME
 typedef std::hash_map < ClauseId, ResChain*>      IdResMap;
 typedef std::hash_set < ClauseId >                IdHashSet;
+typedef std::hash_map < ClauseId, uint64_t >      IdProofRuleMap;
 typedef std::vector   < ResChain* >               ResStack;
 typedef std::hash_map <ClauseId, prop::SatClause* >     IdToSatClause;
 typedef std::set < ClauseId >                     IdSet;
-typedef std::vector < ::Minisat::Lit >              LitVector;
-typedef __gnu_cxx::hash_map<ClauseId, ::Minisat::Clause& > IdToMinisatClause;
+typedef std::vector < Minisat::Lit >              LitVector;
+typedef __gnu_cxx::hash_map<ClauseId, Minisat::Clause& > IdToMinisatClause;
 
 class SatProof;
 
@@ -99,7 +101,7 @@ private:
   SatProof* d_proof;
 public:
   ProofProxy(SatProof* pf);
-  void updateCRef(::Minisat::CRef oldref, ::Minisat::CRef newref);
+  void updateCRef(Minisat::CRef oldref, Minisat::CRef newref);
 };/* class ProofProxy */
 
 
@@ -107,7 +109,7 @@ class CnfProof;
 
 class SatProof {
 protected:
-  ::Minisat::Solver*    d_solver;
+  Minisat::Solver*    d_solver;
   // clauses
   IdCRefMap           d_idClause;
   ClauseIdMap         d_clauseId;
@@ -136,7 +138,7 @@ protected:
   ClauseId d_unitConflictId;
   bool d_storedUnitConflict;
 public:
-  SatProof(::Minisat::Solver* solver, bool checkRes = false);
+  SatProof(Minisat::Solver* solver, bool checkRes = false);
   virtual ~SatProof() {}
 protected:
   void print(ClauseId id);
@@ -146,17 +148,17 @@ protected:
   bool isInputClause(ClauseId id);
   bool isLemmaClause(ClauseId id);
   bool isUnit(ClauseId id);
-  bool isUnit(::Minisat::Lit lit);
+  bool isUnit(Minisat::Lit lit);
   bool hasResolution(ClauseId id);
   void createLitSet(ClauseId id, LitSet& set);
   void registerResolution(ClauseId id, ResChain* res);
 
-  ClauseId      getClauseId(::Minisat::CRef clause);
-  ClauseId      getClauseId(::Minisat::Lit lit);
-  ::Minisat::CRef getClauseRef(ClauseId id);
-  ::Minisat::Lit  getUnit(ClauseId id);
-  ClauseId      getUnitId(::Minisat::Lit lit);
-  ::Minisat::Clause& getClause(::Minisat::CRef ref);
+  ClauseId      getClauseId(Minisat::CRef clause);
+  ClauseId      getClauseId(Minisat::Lit lit);
+  Minisat::CRef getClauseRef(ClauseId id);
+  Minisat::Lit  getUnit(ClauseId id);
+  ClauseId      getUnitId(Minisat::Lit lit);
+  Minisat::Clause& getClause(Minisat::CRef ref);
   virtual void toStream(std::ostream& out);
 
   bool checkResolution(ClauseId id);
@@ -167,7 +169,7 @@ protected:
    *
    * @return
    */
-  ClauseId resolveUnit(::Minisat::Lit lit);
+  ClauseId resolveUnit(Minisat::Lit lit);
   /**
    * Does a depth first search on removed literals and adds the literals
    * to be removed in the proper order to the stack.
@@ -176,27 +178,27 @@ protected:
    * @param removedSet the previously computed set of redundant literals
    * @param removeStack the stack of literals in reverse order of resolution
    */
-  void removedDfs(::Minisat::Lit lit, LitSet* removedSet, LitVector& removeStack, LitSet& inClause, LitSet& seen);
+  void removedDfs(Minisat::Lit lit, LitSet* removedSet, LitVector& removeStack, LitSet& inClause, LitSet& seen);
   void removeRedundantFromRes(ResChain* res, ClauseId id);
 public:
-  void startResChain(::Minisat::CRef start);
-  void addResolutionStep(::Minisat::Lit lit, ::Minisat::CRef clause, bool sign);
+  void startResChain(Minisat::CRef start);
+  void addResolutionStep(Minisat::Lit lit, Minisat::CRef clause, bool sign);
   /**
    * Pops the current resolution of the stack and stores it
    * in the resolution map. Also registers the 'clause' parameter
    * @param clause the clause the resolution is proving
    */
-  void endResChain(::Minisat::CRef clause);
-  void endResChain(::Minisat::Lit lit);
+  void endResChain(Minisat::CRef clause);
+  void endResChain(Minisat::Lit lit);
   /**
    * Stores in the current derivation the redundant literals that were
    * eliminated from the conflict clause during conflict clause minimization.
    * @param lit the eliminated literal
    */
-  void storeLitRedundant(::Minisat::Lit lit);
+  void storeLitRedundant(Minisat::Lit lit);
 
   /// update the CRef Id maps when Minisat does memory reallocation x
-  void updateCRef(::Minisat::CRef old_ref, ::Minisat::CRef new_ref);
+  void updateCRef(Minisat::CRef old_ref, Minisat::CRef new_ref);
   void finishUpdateCRef();
 
   /**
@@ -204,33 +206,33 @@ public:
    *
    * @param conflict
    */
-  void finalizeProof(::Minisat::CRef conflict);
+  void finalizeProof(Minisat::CRef conflict);
 
   /// clause registration methods
-  ClauseId registerClause(const ::Minisat::CRef clause, ClauseKind kind = LEARNT);
-  ClauseId registerUnitClause(const ::Minisat::Lit lit, ClauseKind kind = LEARNT);
+  ClauseId registerClause(const Minisat::CRef clause, ClauseKind kind = LEARNT);
+  ClauseId registerUnitClause(const Minisat::Lit lit, ClauseKind kind = LEARNT);
 
-  void storeUnitConflict(::Minisat::Lit lit, ClauseKind kind = LEARNT);
+  void storeUnitConflict(Minisat::Lit lit, ClauseKind kind = LEARNT);
 
   /**
    * Marks the deleted clauses as deleted. Note we may still use them in the final
    * resolution.
    * @param clause
    */
-  void markDeleted(::Minisat::CRef clause);
+  void markDeleted(Minisat::CRef clause);
   bool isDeleted(ClauseId id) { return d_deleted.find(id) != d_deleted.end(); }
   /**
    * Constructs the resolution of ~q and resolves it with the current
    * resolution thus eliminating q from the current clause
    * @param q the literal to be resolved out
    */
-  void     resolveOutUnit(::Minisat::Lit q);
+  void     resolveOutUnit(Minisat::Lit q);
   /**
    * Constructs the resolution of the literal lit. Called when a clause
    * containing lit becomes satisfied and is removed.
    * @param lit
    */
-  void     storeUnitResolution(::Minisat::Lit lit);
+  void     storeUnitResolution(Minisat::Lit lit);
 
   ProofProxy* getProxy() {return d_proxy; }
 
@@ -244,7 +246,7 @@ protected:
   IdHashSet          d_seenInput;
   IdHashSet          d_seenLemmas;
 
-  inline std::string varName(::Minisat::Lit lit);
+  inline std::string varName(Minisat::Lit lit);
   inline std::string clauseName(ClauseId id);
 
   void collectClauses(ClauseId id);
@@ -257,7 +259,7 @@ class LFSCSatProof : public SatProof {
 private:
   void printResolution(ClauseId id, std::ostream& out, std::ostream& paren);
 public:
-  LFSCSatProof(::Minisat::Solver* solver, bool checkRes = false)
+  LFSCSatProof(Minisat::Solver* solver, bool checkRes = false)
     : SatProof(solver, checkRes)
   {}
   virtual void printResolutions(std::ostream& out, std::ostream& paren);
diff --git a/src/prop/minisat/core/Dimacs.h b/src/prop/minisat/core/Dimacs.h
index 6bd19fb..e4728f6 100644
--- a/src/prop/minisat/core/Dimacs.h
+++ b/src/prop/minisat/core/Dimacs.h
@@ -26,6 +26,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/utils/ParseUtils.h"
 #include "prop/minisat/core/SolverTypes.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -85,5 +86,6 @@ static void parse_DIMACS(gzFile input_stream, Solver& S) {
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/core/Main.cc b/src/prop/minisat/core/Main.cc
index de73b73..cb33d19 100644
--- a/src/prop/minisat/core/Main.cc
+++ b/src/prop/minisat/core/Main.cc
@@ -29,7 +29,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/core/Dimacs.h"
 #include "prop/minisat/core/Solver.h"
 
-using namespace Minisat;
+using namespace CVC4::Minisat;
 
 //=================================================================================================
 
diff --git a/src/prop/minisat/core/Solver.cc b/src/prop/minisat/core/Solver.cc
index 610023b..48f07ec 100644
--- a/src/prop/minisat/core/Solver.cc
+++ b/src/prop/minisat/core/Solver.cc
@@ -33,7 +33,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "proof/proof_manager.h"
 #include "proof/sat_proof.h"
 
-using namespace Minisat;
+using namespace CVC4::Minisat;
 using namespace CVC4;
 using namespace CVC4::prop;
 
diff --git a/src/prop/minisat/core/Solver.h b/src/prop/minisat/core/Solver.h
index 30d72ac..4125fb5 100644
--- a/src/prop/minisat/core/Solver.h
+++ b/src/prop/minisat/core/Solver.h
@@ -45,6 +45,7 @@ namespace prop {
 
 }/* CVC4 namespace */
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -554,5 +555,6 @@ inline void     Solver::toDimacs     (const char* file, Lit p, Lit q, Lit r){ ve
 
 //=================================================================================================
 }/* Minisat namespace */
+}
 
 #endif
diff --git a/src/prop/minisat/core/SolverTypes.h b/src/prop/minisat/core/SolverTypes.h
index a6413e6..c6eeef5 100644
--- a/src/prop/minisat/core/SolverTypes.h
+++ b/src/prop/minisat/core/SolverTypes.h
@@ -31,6 +31,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/mtl/Map.h"
 #include "prop/minisat/mtl/Alloc.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -169,6 +170,7 @@ inline std::ostream& operator <<(std::ostream& out, Minisat::lbool val) {
 
 
 } /* Minisat */
+}
 
 
 
@@ -181,6 +183,7 @@ public:
 
 
 
+namespace CVC4 {
 namespace Minisat{
 
 //=================================================================================================
@@ -485,5 +488,6 @@ inline void Clause::strengthen(Lit p)
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/Alg.h b/src/prop/minisat/mtl/Alg.h
index 6c3a184..365b2d5 100644
--- a/src/prop/minisat/mtl/Alg.h
+++ b/src/prop/minisat/mtl/Alg.h
@@ -23,6 +23,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 
 #include "prop/minisat/mtl/Vec.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -80,5 +81,6 @@ static inline void append(const vec<T>& from, vec<T>& to){ copy(from, to, true);
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/Alloc.h b/src/prop/minisat/mtl/Alloc.h
index 71f9f72..e5b171b 100644
--- a/src/prop/minisat/mtl/Alloc.h
+++ b/src/prop/minisat/mtl/Alloc.h
@@ -24,6 +24,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/mtl/XAlloc.h"
 #include "prop/minisat/mtl/Vec.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -127,5 +128,6 @@ RegionAllocator<T>::alloc(int size)
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/Heap.h b/src/prop/minisat/mtl/Heap.h
index 5b9fb58..c990f9a 100644
--- a/src/prop/minisat/mtl/Heap.h
+++ b/src/prop/minisat/mtl/Heap.h
@@ -23,6 +23,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 
 #include "prop/minisat/mtl/Vec.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -144,5 +145,6 @@ class Heap {
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/Map.h b/src/prop/minisat/mtl/Map.h
index dda6c73..98996be 100644
--- a/src/prop/minisat/mtl/Map.h
+++ b/src/prop/minisat/mtl/Map.h
@@ -23,6 +23,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/mtl/IntTypes.h"
 #include "prop/minisat/mtl/Vec.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -189,5 +190,6 @@ class Map {
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/Queue.h b/src/prop/minisat/mtl/Queue.h
index 2c818fc..ca20144 100644
--- a/src/prop/minisat/mtl/Queue.h
+++ b/src/prop/minisat/mtl/Queue.h
@@ -23,6 +23,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 
 #include "prop/minisat/mtl/Vec.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -65,5 +66,6 @@ public:
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/Sort.h b/src/prop/minisat/mtl/Sort.h
index 644c397..2c3454a 100644
--- a/src/prop/minisat/mtl/Sort.h
+++ b/src/prop/minisat/mtl/Sort.h
@@ -27,6 +27,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 // Some sorting algorithms for vec's
 
 
+namespace CVC4 {
 namespace Minisat {
 
 template<class T>
@@ -94,5 +95,6 @@ template <class T> void sort(vec<T>& v) {
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/Vec.h b/src/prop/minisat/mtl/Vec.h
index 5f85f6f..cb81ee5 100644
--- a/src/prop/minisat/mtl/Vec.h
+++ b/src/prop/minisat/mtl/Vec.h
@@ -27,6 +27,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/mtl/IntTypes.h"
 #include "prop/minisat/mtl/XAlloc.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -126,5 +127,6 @@ void vec<T>::clear(bool dealloc) {
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/mtl/XAlloc.h b/src/prop/minisat/mtl/XAlloc.h
index 1da1760..f1221f9 100644
--- a/src/prop/minisat/mtl/XAlloc.h
+++ b/src/prop/minisat/mtl/XAlloc.h
@@ -24,6 +24,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include <errno.h>
 #include <stdlib.h>
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -41,5 +42,6 @@ static inline void* xrealloc(void *ptr, size_t size)
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/simp/SimpSolver.cc b/src/prop/minisat/simp/SimpSolver.cc
index 6dcdb76..607e3cb 100644
--- a/src/prop/minisat/simp/SimpSolver.cc
+++ b/src/prop/minisat/simp/SimpSolver.cc
@@ -23,8 +23,8 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/utils/System.h"
 #include "prop/options.h"
 #include "proof/proof.h"
-using namespace Minisat;
 using namespace CVC4;
+using namespace CVC4::Minisat;
 
 //=================================================================================================
 // Options:
diff --git a/src/prop/minisat/simp/SimpSolver.h b/src/prop/minisat/simp/SimpSolver.h
index 878d799..eb44e62 100644
--- a/src/prop/minisat/simp/SimpSolver.h
+++ b/src/prop/minisat/simp/SimpSolver.h
@@ -33,6 +33,7 @@ namespace prop {
 }
 }
 
+namespace CVC4 {
 namespace Minisat {
 
 //=================================================================================================
@@ -201,5 +202,6 @@ inline lbool SimpSolver::solveLimited (const vec<Lit>& assumps, bool do_simp, bo
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/utils/Options.h b/src/prop/minisat/utils/Options.h
index b04799c..0577cbb 100644
--- a/src/prop/minisat/utils/Options.h
+++ b/src/prop/minisat/utils/Options.h
@@ -29,6 +29,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include "prop/minisat/mtl/Vec.h"
 #include "prop/minisat/utils/ParseUtils.h"
 
+namespace CVC4 {
 namespace Minisat {
 
 //==================================================================================================
@@ -382,5 +383,6 @@ class BoolOption : public Option
 
 //=================================================================================================
 }
+}
 
 #endif
diff --git a/src/prop/minisat/utils/ParseUtils.h b/src/prop/minisat/utils/ParseUtils.h
index e9dc817..1282059 100644
--- a/src/prop/minisat/utils/ParseUtils.h
+++ b/src/prop/minisat/utils/ParseUtils.h
@@ -27,6 +27,7 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 //#include <zlib.h>
 #include <unistd.h>
 
+namespace CVC4 {
 namespace Minisat {
 
 //-------------------------------------------------------------------------------------------------
@@ -119,5 +120,6 @@ static bool eagerMatch(B& in, const char* str) {
 
 //=================================================================================================
 }
+}
 
 #endif
-- 
2.1.0

